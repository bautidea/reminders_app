{"ast":null,"code":"// We are going to use a fake back end service called 'JSON placeholder' - https://jsonplaceholder.typicode.com/\n// To call the backend we are going to use 'AXios' library.\nimport axios from 'axios';\nclass ReminderService {\n  constructor() {\n    this.http = axios.create({\n      baseURL: 'https://jsonplaceholder.typicode.com/'\n    });\n  }\n  // Now im defining a bunch of methods for getting todos, adding them and removing them.\n  async getReminders() {\n    // Since this get method is generic we specify the type of objects we expect to get.\n    // In this method we specify the URL or the endpoint.\n    const response = await this.http.get('/todos');\n    return response.data;\n  }\n  async addReminder(title) {\n    const response = await this.http.post('/todos', {\n      title\n    });\n    return response.data;\n  }\n  async removeReminder(id) {\n    // We dont need to supply a generic argument here, we just pass a URL\n    const response = await this.http.delete('/todos/' + id);\n    return response.data;\n  }\n}\n\n//  Instead of exporting the ReminderService class we are gonna export an instance of the class\n// with this the consumers of this module dont have to new up an instance of this service every time.\nexport default new ReminderService();","map":{"version":3,"names":["axios","ReminderService","constructor","http","create","baseURL","getReminders","response","get","data","addReminder","title","post","removeReminder","id","delete"],"sources":["C:/Users/juanb/OneDrive/Documentos/0 - De Angelis Juan Bautista/001 - Github/reminders-app/src/services/reminder.ts"],"sourcesContent":["// We are going to use a fake back end service called 'JSON placeholder' - https://jsonplaceholder.typicode.com/\r\n// To call the backend we are going to use 'AXios' library.\r\nimport axios from 'axios';\r\nimport Reminder from '../models/reminder';\r\n\r\nclass ReminderService {\r\n  http = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/',\r\n  });\r\n\r\n  // Now im defining a bunch of methods for getting todos, adding them and removing them.\r\n  async getReminders() {\r\n    // Since this get method is generic we specify the type of objects we expect to get.\r\n    // In this method we specify the URL or the endpoint.\r\n    const response = await this.http.get<Reminder[]>('/todos');\r\n    return response.data;\r\n  }\r\n\r\n  async addReminder(title: string) {\r\n    const response = await this.http.post<Reminder>('/todos', { title });\r\n    return response.data;\r\n  }\r\n\r\n  async removeReminder(id: number) {\r\n    // We dont need to supply a generic argument here, we just pass a URL\r\n    const response = await this.http.delete('/todos/' + id);\r\n    return response.data;\r\n  }\r\n}\r\n\r\n//  Instead of exporting the ReminderService class we are gonna export an instance of the class\r\n// with this the consumers of this module dont have to new up an instance of this service every time.\r\nexport default new ReminderService();\r\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,eAAe,CAAC;EAAAC,YAAA;IAAA,KACpBC,IAAI,GAAGH,KAAK,CAACI,MAAM,CAAC;MAClBC,OAAO,EAAE;IACX,CAAC,CAAC;EAAA;EAEF;EACA,MAAMC,YAAYA,CAAA,EAAG;IACnB;IACA;IACA,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAa,QAAQ,CAAC;IAC1D,OAAOD,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMC,WAAWA,CAACC,KAAa,EAAE;IAC/B,MAAMJ,QAAQ,GAAG,MAAM,IAAI,CAACJ,IAAI,CAACS,IAAI,CAAW,QAAQ,EAAE;MAAED;IAAM,CAAC,CAAC;IACpE,OAAOJ,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMI,cAAcA,CAACC,EAAU,EAAE;IAC/B;IACA,MAAMP,QAAQ,GAAG,MAAM,IAAI,CAACJ,IAAI,CAACY,MAAM,CAAC,SAAS,GAAGD,EAAE,CAAC;IACvD,OAAOP,QAAQ,CAACE,IAAI;EACtB;AACF;;AAEA;AACA;AACA,eAAe,IAAIR,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}